#include <iostream>
#include <string>
#include <cstdlib>
using namespace std;

template<class T>
class Array
{
public:
	Array(int capaCity);      //只有类构造,析构函数不用具体模板类
	Array(const Array<T>& arr);
	~Array();
	T& operator[](int index);
	Array<T>& operator=(const Array<T>& arr);
	void insert(T data);
    void showAll();
public:
	int m_capaCity;     //一共可以容纳多少   
	int m_size;         //当前元素个数     
	T* p_addr;          //首地址  
};


//构造
template<class T>
Array<T>::Array(int capaCity)       //类外实现要用模板类::函数名
{
	m_capaCity = capaCity;
	m_size = 0;
	this->p_addr = new T[this->m_capaCity];
}


//拷贝构造
template<class T>
Array<T>::Array(const Array<T>& arr)
{
	
	this->p_addr = new T[arr.m_capaCity];
	for (int i = 0; i < arr.m_size; i++)
		this->p_addr[i] = arr.p_addr[i];
	this->m_size = arr.m_size;
	this->m_capaCity = arr.m_capaCity;

}


//析构
template<class T>
Array<T>::~Array<T>() {
	if (this->p_addr != NULL)
		delete[]this->p_addr;

}



template<class T>
T& Array<T>::operator[](int index) {
	return this->p_addr[index];
}


template<class T>
Array<T>& Array<T>::operator=(const Array<T>& arr) {
	if (this->p_addr != NULL)
		delete[]this->p_addr;
	this->p_addr = new T[arr.m_capaCity];
	for (int i = 0; i < arr.m_size; i++)
		this->p_addr[i] = arr.p_addr[i];
	this->m_size = arr.m_size;
	return *this;
}



template<class T>
void Array<T>::insert(T data) {
	if (this->m_size >= this->m_capaCity)
		return;
	this->p_addr[this->m_size] = data;
	this->m_size++;
}


template<class T>
void Array<T>::showAll() {
    for (int i = 0; i < m_size; ++i) {
        cout << p_addr[i] << endl;
    }
}


int main() {
    string str1="yangzhou301";
    Array<char> arr1(str1.length());
    for(auto c:str1)
    {
        arr1.insert(c);
    }
    arr1.showAll();
    int num[]={1,9,2,6,0,8,1,7};
    Array<int>arr2(sizeof(num)/sizeof(int));
    for(auto c:num)
    {
        arr2.insert(c);
    }
	arr2.showAll();
    arr2.insert(301);
    return 0;
}

