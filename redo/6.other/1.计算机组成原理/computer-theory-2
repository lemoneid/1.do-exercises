四地址指令前述的4个地址信息都在地址字段中明显地给出，其指令的格式为：[插图]指令的含义：（A1）OP（A2）→A3A4=下条将要执行指令的地址其中：OP表示具体的操作，Ai表示地址，（Ai）表示存放于该地址中的内容．正常情况下，大多数指令按顺序依次被从主存中取出来执行，只有在遇到转移指令时，程序的执行顺序才会改变．因此，可以用一个程序计数器（Program Counter, PC）来存放指令地址．每当CPU从内存取完一条指令，PC就自动增值（增值量是所取指令在内存存放时所占的字节数），直接得到将要执行的下一条指令的地址．这样，指令中就不必再明显地给出下一条指令的地址了．
(A1）OP（A2）→A3PC完成修改（隐含）
执行一条三地址的双操作数运算指令，至少需要访问4次主存．第一次取指令本身，第二次取第一操作数，第三次取第二操作数，第四次保存运算结果
三地址指令执行完后，主存中的两个操作数均不会被破坏．然而，通常并不需要完整的保留两个操作数．比如，可让第一操作数地址同时兼作存放结果的地址（目的地址），这样即得到了二地址指令，其格式为：[插图]指令的含义：（A1）OP（A2）→A1PC完成修改（隐含）其中：A1为目的操作数地址，A2为源操作数地址．注意：指令执行之后，目的操作数地址中原存的内容已被破坏了．执行一条二地址的双操作数运算指令，同样至少需要访问4次主存
一地址指令顾名思义只有一个显地址，它的指令格式为：[插图]一地址指令只有一个地址，那么另一个操作数来自何方呢？指令中虽未明显给出，但按事先约定，这个隐含的操作数就放在一个专门的寄存器中．因为这个寄存器在连续性运算时，保存着多条指令连续操作的累计结果，故称为累加寄存器（Accumulator, Acc）.指令的含义：（Acc）OP（A1）→AccPC完成修改（隐含）执行一条一地址的双操作数运算指令，只需要访问两次主存．第一次取指令本身，第二次取第二操作数．第一操作数和运算结果都放在累加寄存器中，所以读取和存入都不需要访问主存．5．零地址指令零地址指令格式中只有操作码字段，没有地址码字段，其格式为：[插图]零地址的算术逻辑类指令是用在堆栈计算机中的，堆栈计算机没有一般计算机中必备的通用寄存器，因此堆栈就成为提供操作数和保存运算结果的唯一场所．通常，参加算术逻辑运算的两个操作数隐含地从堆栈顶部弹出，送到运算器中进行运算，运算的结果再隐含地压入堆栈．指令中地址个数的选取要考虑诸多的因素．从缩短程序长度、用户使用方便、增加操作并行度等方面来看，选用三地址指令格式较好；从缩短指令长度，减少访存次数、简化硬件设计等方面来看，一地址指令格式较好．对


通常，指令中的地址码字段将指出操作数的来源和去向，而操作数则存放在相应的存储设备中．

在计算机中，编址方式是指对各种存储设备进行编码的方式．主要有CPU中的通用寄存器、主存储器和输入输出设备3种．

如果存储设备是CPU中的通用寄存器，在指令字中应给出寄存器编号；如果是主存的一个存储单元，在指令字中应给出该主存单元的地址；如果是输入输出设备（接口）中的一个寄存器，指令字中应给出设备编号或设备端口地址或设备映像地址（与主存地址统一编址时

寻址可以分为指令寻址和数据寻址．寻找下一条将要执行的指令地址称为指令寻址，寻找操作数的地址称为数据寻址．指令寻址比较简单，它又可以细分为顺序寻址和跳跃寻址．而数据寻址方式种类较多，其最终目的都是寻找所需要的操作数．顺序寻址可通过程序计数器的增量修改，自动形成下一条指令的地址；跳跃寻址则需要通过程序转移类指令实现．跳跃寻址的转移地址形式方式有3种：直接（绝对）、相对和间接寻址，它与下面介绍的数据寻址方式中的直接、相对和间接寻址是相同的，只不过寻找到的不是操作数的有效地址而是转移的有效地址．5.2.3 基本的数据寻址方式数据寻址方式是根据指令中给出的地址码字段寻找真实操作数地址的方式．一般情况下，由于指令长度的限制，指令中的地址码不会很长，而主存的容量却可能越来越大．

（1）3个地址空间：虚拟存储器有3种地址空间，如图7.65所示．虚拟地址空间或虚存空间，即程序员编写程序时使用的地址空间；主存地址空间或实地址空间，这个空间用于存放运行的程序和数据；辅存地址空间，即磁盘存储器的地址空间，用于存放暂时不能调入主存的程序和数据．


拟存储器基本的信息交换单位（粒度）有几种不同的方案，即段、页和段页，这样主存一外存层次的基本信息传送单位可采用3种不同的方案：段、页或段页，这就形成了页式虚拟存储器、段式虚拟存储器、段页式虚拟存储器．

I/O设备与主机交换信息的三种控制方式（程序查询、程序中断和DMA）
