ORG:更多地强调了对程序员的影响。例如,要反过来考虑数据表示对C语言程序的数据类型和操作的影响

ORG+:强调硬件对应用程序性能,代码优化和改进C语言程序的内存性能

ICS+:系统级网络编程和并发编程

大部分的现代计算机系统都使用ASCII标准来表示文本字符,这种方式实际上就是用
一个唯一的单字节大小的整数值@来表示每个字符
系统中所有的信息
——
包括磁盘文件、内
存中的程序、内存中存放的用户数据以及网络上传送的数据,都是由一串比特表示的。区
分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。比如,在不同的上下文
中,一个同样的字节序列可能表示一个整数、浮点数、字符串或者机器指令。

汇编阶段。接下来,汇编器(as)将hello.
s翻译成机器语言指令,把这些指令打包成
一种叫做可重定位目标程序(relocatableobjectprogram)的格式,并将结果保存在目标
文件hello.
〇中。hello.
〇文件是一个二进制文件,它包含的17个字节是函数main
的指令编码。如果我们在文本编辑器中打开hello.
〇文件,将看到一堆乱码。
链接阶段。请注意,hello程序调用了printf函数,它是每个C编译器都提供库中的一个函数。printf函数存在于一个名为printf.
ÿ的单独的预编译
d)就负责处理这种合并。结果就得到hello文件,它是一个可执行目标文件.
〇程序中。链
链接阶段。请注意,hello程序调用了printf函数,它是每个C编译器都提供的
标准C库中的一个函数。printf函数存在于一个名为printf.
ÿ的单独的预编译
好了的目标文件中,而这个文件必须以某种方式合并到我们的hello.
〇程序中。链
接器(Id)就负责处理这种合并。结果就得到hello文件,它是一个可执行目标文件
(或者简称为可执行文件),可以被加载到内存中,由系统执行。

缓冲区溢出错误是造成大多数网络和Internet服务器上安
全漏洞的主要原因。存在这些错误是因为很少有程序员能够理解需要限制从不受信
任的源接收数据的数量和格式。学习安全编程的第一步就是理解数据和控制信息存
储在程序栈上的方式会引起的后果


系统的硬件组成
1.
总线
贯穿整个系统的是一组电子管道,称作总线,它携带信息字节并负责在各个部件间传
递。通常总线被设计成传送定长的字节块,也就是字(word)。字中的字节数(即字长)是一
个基本的系统参数,各个系统中都不尽相同。现在的大多数机器字长要么是4个字节(32
位),要么是8个字节(64位)。
.
I/O设备
1/〇(输入/输出)设备是系统与外部世界的联系通道。我们的示例系统包括四个I/O设
备:作为用户输入的键盘和鼠标,作为用户输出的显示器,以及用于长期存储数据和程序
的磁盘驱动器(简单地说就是磁盘)。最开始,可执行程序hello就存放在磁盘上。
每个
I/O设备都通过一个控制器或适配器与I/O总线相连。控制器和适配器之间的区

别主要在于它们的封装方式。控制器是I/O设备本身或者系统的主印制电路板(通常称作
主板)上的芯片组。而适配器则是一块插在主板插槽上的卡。无论如何,它们的功能都是
在I/O总线和I/O设备之间传递信息。

3.
主存
主存是一个临时存储设备,在处理器执行程序时,用来存放程序和程序处理的数据。从
物理上来说,主存是由一组动态随机存取存储器(DRAM)芯片组成的。从逻辑上来说,存储
器是一个线性的字节数组,每个字节都有其唯一的地址(数组索引),这些地址是从零开始
的。一般来说,组成程序的每条机器指令都由不同数量的字节构成。与C程序变量相对应的
数据项的大小是根据类型变化的。比如,在运行Linux的X86-64机器上,short类型的数据
需要2个字节,int和float类型需要4个字节,而long和double类型需要8个宇节。
第6章将具体介绍存储器技术,比如DRAM芯片是如何工作的,它们又是如何组合
起来构成主存的。

4.
处理器
中央处理单元
(CPU),简称处理器,是解释(或执行)存储在主存中指令的引擎。处理
器的核心是一个大小为一个字的存储设备(或寄存器),称为程序计数器(PC)。在任何时
刻,PC都指向主存中的某条机器语言指令(即含有该条指令的地址)。e
从系统通电开始,直到系统断电,处理器一直在不断地执行程序计数器指向的指令,
再更新程序计数器,使其指向下一条指令。处理器看上去是按照一个非常简单的指令执行
模型来操作的,这个模型是由指令集架构决定的。在这个模型中,指令按照严格的顺序执
行,而执行一条指令包含执行一系列的步骤。处理器从程序计数器指向的内存处读取指

令,解释指令中的位,执行该指令指示的简单操作,然后更新PCÿ使其指向下一条指令,
而这条指令并不一定和在内存中刚刚执行的指令相邻。
这样的简单操作并不多,它们围绕着主存、寄存器文件(registerfile)和算术/逻辑单
元(ALU)进行。寄存器文件是一个小的存储设备,由一些单个字长的寄存器组成,每个
寄存器都有唯一的名字。ALU计算新的数据和地址值。下面是一些简单操作的例子,
CPU在指令的要求下可能会执行这些操作。
加载:从主存复制一个字节或者一个字到寄存器,以覆盖寄存器原来的内容。
*存储:从寄存器复制一个字节或者一个字到主存的某个位置,以覆盖这个位置上原
来的内容。
操作:把两个寄存器的内容复制到ALU,ALU对这两个字做算术运算,并将结果
存放到一个寄存器中,以覆盖该寄存器中原来的内容。
跳转:从指令本身中抽取一个字,并将这个字复制到程序计数器
(PC)中,以覆盖
PC中原来的值。
处理器看上去是它的指令集架构的简单实现,但是实际上现代处理器使用了非常复杂
的机制来加速程序的执行。因此,我们将处理器的指令集架构和处理器的微体系结构区分
开来:指令集架构描述的是每条机器代码指令的效果;
而微体系结构描述的是处理器实际
上是如何实现的。在第3章研究机器代码时,我们考虑的是机器的指令集架构所提供的抽
象性。第4章将更详细地介绍处理器实际上是如何实现的。第5章用一个模型说明现代处
理器是如何工作的,从而能预测和优化机器语言程序的性能。

对硬件的操作尝试都必须通 过操作 系统。
(1) 防止硬
操作 系统有 两个基 本功能 :
(2) 向应 用程序
件被失 控的应 用程序 滥用;
提供简单一致的 机制来 控制复 杂而又 通常大
不相同的低级硬 件设备。操作 系统通 过几个
基 本的抽象概念 (进程 、虚拟 内存和 文件) 来
实 现这两个功能 。如图 1-11 所示 ,文 件是对

I/O 设备的抽象表示 ,虚拟 内存是对主存 和磁盘 I/O 设 备的抽 象表示 ,进 程则是 对处理
器、主存和 I/O 设 备的抽 象表示 。我们 将依次讨论每种抽象 表示。
进 程是操作系统 对一个正在运 行的程 序的一 种抽象 。在一 个系统 上可以 同时运 行多个
进程 ,而 每个进 程都好 像在独占地使用硬件。而并 发运行 ,则 是说一 个进程 的指令 和另一
个进程 的指令是交错 执行的

它为 每个进 程提供了一个假象,即每个 进程都 在独占地使用
主存。每个进程看到的内存都是一致的 ,称为 虚拟地 址空间
基本思想是把一个进程虚 拟内存的内容存储在 磁盘上 ,然后用主存作为
磁 盘的高 速缓存
。系统中的所有 输人输 出都是通过使 用一小组称为 Unix I/O 的系
文件 就是字 节序列 ,仅 此而已 。每个
统函 数调用读写文 件来实 现的。
文件这 个简单而精致 的概念 是非常 强大的 ,因为它向应 用程序 提供了 一个统 一的视
图,来看待 系统中 可能含 有的所 有各式 各样的 I/O 设备。例如 ,处理 磁盘文 件内容 的应用
程序员 可以非 常幸福 ,因 为他 们无须了解具体的磁 盘技术 。进 一步说 ,同一 个程序 可以在
使 用不同 磁盘技 术的不同系统上运行 。你 将在第 10 章中学习
I/O 设备 ,包 括磁盘 、键盘 、显 示器,甚至网
络 ,都可 以看成 是文件


小结
计算 机系统 是由硬 件和系统软件 组成的 ,它 们共同 协作以 运行应 用程序 。计算 机内部 的信息 被表示
为一组 组的位 ,它 们依据 上下文 有不同 的解释 方式。程序被 其他程 序翻译 成不同 的形式 ,开 始时是
ASCII 文本 ,然 后被编 译器和 链接器 翻译成 二进制 可执行 文件。
处理 器读取并解释 存放在 主存里 的二进 制指令 。因为 计算机 花费了 大量的 时间在 内存、 I/O 设备和
CPU 寄存器 之间复 制数据 ,所 以将 系统中 的存储 设备划 分成层 次结构
•CPU 寄存器 在顶部 ,接 着是多
层的硬 件高速 缓存存 储器、 DRAM 主存和 磁盘存 储器。在层次 模型中 ,位于更高层 的存储 设备比 低层的
存 储设备要更快 ,单 位比特 造价也更高。层次结构中较 高层次 的存储 设备可 以作为 较低层次设备 的高速
缓存。通过理 解和运 用这种 存储层 次结构 的知识 ,程 序员可 以优化 C 程序的 性能。
操 作系统内核是 应用程 序和硬 件之间的媒介 。它 提供三 个基本 的抽象 : 1) 文 件是对
2) 虚拟内 存是对 主存和 磁盘的 抽象; 3) 进程是 处理器 、主 存和
I/O 设备的 抽攀;
I/O 设备的 抽象。
最后 ,网络 提供了 计算机 系统之间通信的手段 。从特 殊系统的角度 来看,网络就是一种
I/O 设备。
